{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yigit\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\Doc\\\\Projeler\\\\WeatherApp-ReactJS\\\\src\\\\modules\\\\CityComponent.js\",\n  _s = $RefreshSig$();\nimport styled, { css } from \"styled-components\";\nimport React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLocationDot } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchBox = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  margin: 20px;\n  position: relative;\n\n  & input {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    background: #1e1e29;\n    border-radius: 8px;\n    padding: 10px;\n    font-size: 14px;\n    border: none;\n    outline: none;\n    font-weight: bold;\n    color: white;\n\n    ${({\n  isEmpty\n}) => isEmpty && css`\n        border: 2px solid red;\n      `}\n  }\n  & button {\n    background-color: #7692c9;\n    font-size: 14px;\n    padding: 0 10px;\n    color: white;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    font-weight: bold;\n    border-radius: 8px;\n    margin-left: 3px;\n    margin-right: 3px;\n  }\n`;\n_c = SearchBox;\nconst ChooseCityLabel = styled.span`\n  width: 311px;\n  height: 20px;\n\n  font-family: \"Nunito\";\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 140%;\n\n  align-items: center;\n  text-align: center;\n\n  color: #bfbfd4;\n`;\nconst WelcomeLabel = styled.div`\n  color: white;\n  font-family: \"Nunito\";\n  font-style: normal;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 140%;\n  & span {\n    color: #7692c9;\n  }\n`;\nconst AppLogo = styled.img`\n  width: 186px;\n  height: 32px;\n  opacity: 0.8;\n  margin: 40px auto;\n  margin-bottom: 140px;\n`;\nconst AutocompleteList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  position: absolute;\n  background-color: #1e1e29;\n  border-radius: 8px;\n  width: 208px;\n  max-height: 200px;\n  overflow-y: auto;\n  top: calc(100% + -335px);\n  left: 50%;\n  transform: translateX(-50%);\n`;\nconst AutocompleteItem = styled.li`\n  padding: 10px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n  &:hover {\n    background-color: #3d3d4d;\n  }\n`;\nconst CityComponent = ({\n  fetchWeather\n}) => {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleInputChange = async e => {\n    const value = e.target.value;\n    setCity(value);\n    try {\n      setIsLoading(true);\n      const response = await Axios.get(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${value}`, {\n        headers: {\n          \"X-RapidAPI-Key\": \"64a947ac66msh6990946afef4b41p186a5djsn3522f68f3e2e\",\n          \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n        }\n      });\n      const cities = response.data.data.map(city => ({\n        name: city.city,\n        country: city.countryCode\n      }));\n      setAutocompleteCities(cities);\n    } catch (error) {\n      console.error(\"API'den şehir verisi alınırken bir hata oluştu:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!city.trim()) {\n      alert(\"Please enter a location!\");\n      return;\n    }\n    fetchWeather(city);\n    setCity(\"\");\n  };\n  const handleLocationClick = () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      // Koordinatları kullanarak hava durumu bilgisi al\n      const response = await Axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=8297725875f39e37ed6a7bc2e1fc738c`);\n      fetchWeather(response.data.name);\n    }, error => {\n      console.error(\"Konum bilgisini alırken bir hata oluştu:\", error);\n    });\n  };\n  const handleAutocompleteClick = cityName => {\n    setCity(cityName);\n    setAutocompleteCities([]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SearchBox, {\n      onSubmit: handleSubmit,\n      children: [isLoading && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faSpinner,\n        spin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 23\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleLocationClick,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faLocationDot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: city,\n        onChange: handleInputChange,\n        placeholder: \"Search location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(CityComponent, \"jjujmr84RctErZ78h4fykRS1ABo=\");\n_c2 = CityComponent;\nexport default CityComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"SearchBox\");\n$RefreshReg$(_c2, \"CityComponent\");","map":{"version":3,"names":["styled","css","React","useState","Axios","FontAwesomeIcon","faLocationDot","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchBox","form","isEmpty","_c","ChooseCityLabel","span","WelcomeLabel","div","AppLogo","img","AutocompleteList","ul","AutocompleteItem","li","CityComponent","fetchWeather","_s","city","setCity","autocompleteCities","setAutocompleteCities","isLoading","setIsLoading","handleInputChange","e","value","target","response","get","headers","cities","data","map","name","country","countryCode","error","console","handleSubmit","preventDefault","trim","alert","handleLocationClick","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","handleAutocompleteClick","cityName","children","onSubmit","icon","faSpinner","spin","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","onChange","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/yigit/OneDrive/Masaüstü/Doc/Projeler/WeatherApp-ReactJS/src/modules/CityComponent.js"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\nimport React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLocationDot } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchBox = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  margin: 20px;\r\n  position: relative;\r\n\r\n  & input {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-evenly;\r\n    background: #1e1e29;\r\n    border-radius: 8px;\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n    color: white;\r\n\r\n    ${({ isEmpty }) =>\r\n      isEmpty &&\r\n      css`\r\n        border: 2px solid red;\r\n      `}\r\n  }\r\n  & button {\r\n    background-color: #7692c9;\r\n    font-size: 14px;\r\n    padding: 0 10px;\r\n    color: white;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    margin-left: 3px;\r\n    margin-right: 3px;\r\n  }\r\n`;\r\nconst ChooseCityLabel = styled.span`\r\n  width: 311px;\r\n  height: 20px;\r\n\r\n  font-family: \"Nunito\";\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 140%;\r\n\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n  color: #bfbfd4;\r\n`;\r\n\r\nconst WelcomeLabel = styled.div`\r\n  color: white;\r\n  font-family: \"Nunito\";\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 140%;\r\n  & span {\r\n    color: #7692c9;\r\n  }\r\n`;\r\n\r\nconst AppLogo = styled.img`\r\n  width: 186px;\r\n  height: 32px;\r\n  opacity: 0.8;\r\n  margin: 40px auto;\r\n  margin-bottom: 140px;\r\n`;\r\n\r\nconst AutocompleteList = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  position: absolute;\r\n  background-color: #1e1e29;\r\n  border-radius: 8px;\r\n  width: 208px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  top: calc(100% + -335px);\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst AutocompleteItem = styled.li`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: white;\r\n  &:hover {\r\n    background-color: #3d3d4d;\r\n  }\r\n`;\r\n\r\nconst CityComponent = ({ fetchWeather }) => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleInputChange = async (e) => {\r\n    const value = e.target.value;\r\n    setCity(value);\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await Axios.get(\r\n        `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${value}`,\r\n        {\r\n          headers: {\r\n            \"X-RapidAPI-Key\":\r\n              \"64a947ac66msh6990946afef4b41p186a5djsn3522f68f3e2e\",\r\n            \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\r\n          },\r\n        }\r\n      );\r\n      const cities = response.data.data.map((city) => ({\r\n        name: city.city,\r\n        country: city.countryCode,\r\n      }));\r\n      setAutocompleteCities(cities);\r\n    } catch (error) {\r\n      console.error(\"API'den şehir verisi alınırken bir hata oluştu:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!city.trim()) {\r\n      alert(\"Please enter a location!\");\r\n      return;\r\n    }\r\n    fetchWeather(city);\r\n    setCity(\"\");\r\n  };\r\n\r\n  const handleLocationClick = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        // Koordinatları kullanarak hava durumu bilgisi al\r\n        const response = await Axios.get(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=8297725875f39e37ed6a7bc2e1fc738c`\r\n        );\r\n        fetchWeather(response.data.name);\r\n      },\r\n      (error) => {\r\n        console.error(\"Konum bilgisini alırken bir hata oluştu:\", error);\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleAutocompleteClick = (cityName) => {\r\n    setCity(cityName);\r\n    setAutocompleteCities([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Diğer bileşenler burada... */}\r\n      <SearchBox onSubmit={handleSubmit}>\r\n        {isLoading && <FontAwesomeIcon icon={faSpinner} spin />}{\" \"}\r\n        {/* Yükleniyor ikonu */}\r\n        <button type=\"button\" onClick={handleLocationClick}>\r\n          <FontAwesomeIcon icon={faLocationDot} />\r\n        </button>\r\n        <input\r\n          value={city}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Search location\"\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n        {/* Diğer kodlar burada... */}\r\n      </SearchBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}