{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yigit\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\Doc\\\\Projeler\\\\WeatherApp-ReactJS\\\\src\\\\modules\\\\WeatherForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport styled from \"styled-components\";\nimport { WeatherIcons } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n_c = ForecastContainer;\nconst DayForecast = styled.div`\n  flex: 0 0 calc(33.3333% - 20px);\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #1e1e29;\n  border-radius: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\n  color: white;\n`;\n_c2 = DayForecast;\nconst WeatherIcon = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n_c3 = WeatherIcon;\nconst WeatherDescription = styled.p`\n  margin: 10px 0;\n`;\n_c4 = WeatherDescription;\nconst Temperature = styled.p`\n  font-weight: bold;\n`;\n_c5 = Temperature;\nconst WeatherForecast = ({\n  city\n}) => {\n  _s();\n  const [forecast, setForecast] = useState(null);\n  useEffect(() => {\n    const fetchForecast = async () => {\n      try {\n        const response = await Axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=8297725875f39e37ed6a7bc2e1fc738c`);\n        setForecast(response.data);\n      } catch (error) {\n        console.error(\"Forecast data fetch error:\", error);\n      }\n    };\n    if (city) {\n      fetchForecast();\n    }\n  }, [city]);\n  const formatForecastData = () => {\n    if (!forecast) return [];\n\n    // Gruplandırılmış hava tahmini verilerini oluştur\n    const groupedForecast = forecast.list.reduce((acc, item) => {\n      const date = item.dt_txt.split(\" \")[0]; // Tarihi ayır\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(item);\n      return acc;\n    }, {});\n\n    // Gruplanmış verileri nesne dizisine dönüştür\n    const formattedForecast = Object.keys(groupedForecast).map(date => ({\n      date,\n      data: groupedForecast[date]\n    }));\n    return formattedForecast;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Weather Forecast for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForecastContainer, {\n      children: formatForecastData().map(forecastItem => /*#__PURE__*/_jsxDEV(DayForecast, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: new Date(forecastItem.date).toLocaleDateString(\"en-US\", {\n            weekday: \"long\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), forecastItem.data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(WeatherIcon, {\n            src: `http://openweathermap.org/img/wn/${item.weather[0].icon}.png`,\n            alt: item.weather[0].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(WeatherDescription, {\n            children: item.weather[0].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Temperature, {\n            children: [(item.main.temp - 273.15).toFixed(1), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this))]\n      }, forecastItem.date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherForecast, \"xlTKpFGEDY72AHUcnH/1pPBQUkI=\");\n_c6 = WeatherForecast;\nexport default WeatherForecast;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ForecastContainer\");\n$RefreshReg$(_c2, \"DayForecast\");\n$RefreshReg$(_c3, \"WeatherIcon\");\n$RefreshReg$(_c4, \"WeatherDescription\");\n$RefreshReg$(_c5, \"Temperature\");\n$RefreshReg$(_c6, \"WeatherForecast\");","map":{"version":3,"names":["React","useState","useEffect","Axios","styled","WeatherIcons","jsxDEV","_jsxDEV","ForecastContainer","div","_c","DayForecast","_c2","WeatherIcon","img","_c3","WeatherDescription","p","_c4","Temperature","_c5","WeatherForecast","city","_s","forecast","setForecast","fetchForecast","response","get","data","error","console","formatForecastData","groupedForecast","list","reduce","acc","item","date","dt_txt","split","push","formattedForecast","Object","keys","map","children","fileName","_jsxFileName","lineNumber","columnNumber","forecastItem","Date","toLocaleDateString","weekday","index","src","weather","icon","alt","description","main","temp","toFixed","_c6","$RefreshReg$"],"sources":["C:/Users/yigit/OneDrive/Masaüstü/Doc/Projeler/WeatherApp-ReactJS/src/modules/WeatherForecast.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { WeatherIcons } from \"../App\";\r\n\r\nconst ForecastContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst DayForecast = styled.div`\r\n  flex: 0 0 calc(33.3333% - 20px);\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  background-color: #1e1e29;\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\r\n  color: white;\r\n`;\r\n\r\nconst WeatherIcon = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n`;\r\n\r\nconst WeatherDescription = styled.p`\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst Temperature = styled.p`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst WeatherForecast = ({ city }) => {\r\n  const [forecast, setForecast] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchForecast = async () => {\r\n      try {\r\n        const response = await Axios.get(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=8297725875f39e37ed6a7bc2e1fc738c`\r\n        );\r\n        setForecast(response.data);\r\n      } catch (error) {\r\n        console.error(\"Forecast data fetch error:\", error);\r\n      }\r\n    };\r\n\r\n    if (city) {\r\n      fetchForecast();\r\n    }\r\n  }, [city]);\r\n\r\n  const formatForecastData = () => {\r\n    if (!forecast) return [];\r\n\r\n    // Gruplandırılmış hava tahmini verilerini oluştur\r\n    const groupedForecast = forecast.list.reduce((acc, item) => {\r\n      const date = item.dt_txt.split(\" \")[0]; // Tarihi ayır\r\n      if (!acc[date]) {\r\n        acc[date] = [];\r\n      }\r\n      acc[date].push(item);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Gruplanmış verileri nesne dizisine dönüştür\r\n    const formattedForecast = Object.keys(groupedForecast).map((date) => ({\r\n      date,\r\n      data: groupedForecast[date],\r\n    }));\r\n\r\n    return formattedForecast;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Weather Forecast for {city}</h2>\r\n      <ForecastContainer>\r\n        {formatForecastData().map((forecastItem) => (\r\n          <DayForecast key={forecastItem.date}>\r\n            <h3>\r\n              {new Date(forecastItem.date).toLocaleDateString(\"en-US\", {\r\n                weekday: \"long\",\r\n              })}\r\n            </h3>\r\n            {forecastItem.data.map((item, index) => (\r\n              <div key={index}>\r\n                <WeatherIcon\r\n                  src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`}\r\n                  alt={item.weather[0].description}\r\n                />\r\n                <WeatherDescription>\r\n                  {item.weather[0].description}\r\n                </WeatherDescription>\r\n                <Temperature>\r\n                  {(item.main.temp - 273.15).toFixed(1)}°C\r\n                </Temperature>\r\n              </div>\r\n            ))}\r\n          </DayForecast>\r\n        ))}\r\n      </ForecastContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}