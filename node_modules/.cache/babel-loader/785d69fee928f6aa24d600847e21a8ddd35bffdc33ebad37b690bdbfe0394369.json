{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/yigit/OneDrive/Masa\\xFCst\\xFC/Doc/Projeler/WeatherApp-ReactJS/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7;import styled,{css}from\"styled-components\";import React,{useState}from\"react\";import Axios from\"axios\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faLocationDot}from\"@fortawesome/free-solid-svg-icons\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SearchBox=styled.form(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  margin: 20px;\\n\\n  & input {\\n    position: relative;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-evenly;\\n    background: #1e1e29;\\n    border-radius: 8px;\\n    padding: 10px;\\n    font-size: 14px;\\n    border: none;\\n    outline: none;\\n    font-weight: bold;\\n    color: white;\\n\\n    \",\"\\n  }\\n  & button {\\n    background-color: #7692c9;\\n    font-size: 14px;\\n    padding: 0 10px;\\n    color: white;\\n    border: none;\\n    outline: none;\\n    cursor: pointer;\\n    font-weight: bold;\\n    border-radius: 8px;\\n    margin-left: 3px;\\n    margin-right: 3px;\\n  }\\n\"])),_ref=>{let{isEmpty}=_ref;return isEmpty&&css(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n        border: 2px solid red;\\n      \"])));});const ChooseCityLabel=styled.span(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  width: 311px;\\n  height: 20px;\\n\\n  font-family: \\\"Nunito\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  font-size: 14px;\\n  line-height: 140%;\\n\\n  align-items: center;\\n  text-align: center;\\n\\n  color: #bfbfd4;\\n\"])));const WelcomeLabel=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  color: white;\\n  font-family: \\\"Nunito\\\";\\n  font-style: normal;\\n  font-weight: 700;\\n  font-size: 20px;\\n  line-height: 140%;\\n  & span {\\n    color: #7692c9;\\n  }\\n\"])));const AppLogo=styled.img(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  width: 186px;\\n  height: 32px;\\n  left: calc(50% - 186px / 2 - 0.5px);\\n  top: 48px;\\n  opacity: 0.8;\\n  margin: 40px auto;\\n  margin-bottom: 140px;\\n\"])));const AutocompleteList=styled.ul(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n  position: absolute;\\n  background-color: #1e1e29;\\n  border-radius: 8px;\\n  width: 208px;\\n  max-height: 200px;\\n  overflow-y: auto;\\n  top: calc(100% + -335px);\\n  left: 50%;\\n  transform: translateX(-50%);\\n\"])));const AutocompleteItem=styled.li(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  padding: 10px;\\n  cursor: pointer;\\n  font-size: 14px;\\n  font-weight: bold;\\n  color: white;\\n  &:hover {\\n    background-color: #3d3d4d;\\n  }\\n\"])));const CityComponent=_ref2=>{let{updateCity,fetchWeather}=_ref2;const[city,setCity]=useState(\"\");const[autocompleteCities,setAutocompleteCities]=useState([]);const handleInputChange=async e=>{const value=e.target.value;setCity(value);try{const response=await Axios.get(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=\".concat(value),{headers:{\"X-RapidAPI-Key\":\"64a947ac66msh6990946afef4b41p186a5djsn3522f68f3e2e\",\"X-RapidAPI-Host\":\"wft-geo-db.p.rapidapi.com\"}});const cities=response.data.data.map(city=>({name:city.city,country:city.countryCode}));setAutocompleteCities(cities);}catch(error){console.error(\"API'den şehir verisi alınırken bir hata oluştu:\",error);}};const handleAutocompleteClick=cityName=>{setCity(cityName);setAutocompleteCities([]);};const handleSubmit=e=>{e.preventDefault();if(!city.trim()){alert(\"Please enter a location!\");return;}fetchWeather(city);setCity(\"\");};const handleLocationClick=()=>{navigator.geolocation.getCurrentPosition(async position=>{const{latitude,longitude}=position.coords;// Koordinatları kullanarak hava durumu bilgisi al\nconst response=await Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(latitude,\"&lon=\").concat(longitude,\"&appid=8297725875f39e37ed6a7bc2e1fc738c\"));fetchWeather(response.data.name);},error=>{console.error(\"Konum bilgisini alırken bir hata oluştu:\",error);});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(AppLogo,{src:\"/icons/logo.png\"}),/*#__PURE__*/_jsxs(WelcomeLabel,{children:[\"Welcome to \",/*#__PURE__*/_jsx(\"span\",{children:\"TypeWeather\"})]}),/*#__PURE__*/_jsx(ChooseCityLabel,{children:\"Choose a location to see the weather forecast\"}),/*#__PURE__*/_jsxs(SearchBox,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleLocationClick,children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faLocationDot})}),/*#__PURE__*/_jsx(\"input\",{value:city,onChange:handleInputChange,placeholder:\"Search location\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Search\"}),autocompleteCities.length>0&&/*#__PURE__*/_jsx(AutocompleteList,{children:autocompleteCities.map((city,index)=>/*#__PURE__*/_jsx(AutocompleteItem,{onClick:()=>handleAutocompleteClick(city.name),children:\"\".concat(city.name,\", \").concat(city.country)},index))})]})]});};export default CityComponent;","map":{"version":3,"names":["styled","css","React","useState","Axios","FontAwesomeIcon","faLocationDot","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SearchBox","form","_templateObject","_taggedTemplateLiteral","_ref","isEmpty","_templateObject2","ChooseCityLabel","span","_templateObject3","WelcomeLabel","div","_templateObject4","AppLogo","img","_templateObject5","AutocompleteList","ul","_templateObject6","AutocompleteItem","li","_templateObject7","CityComponent","_ref2","updateCity","fetchWeather","city","setCity","autocompleteCities","setAutocompleteCities","handleInputChange","e","value","target","response","get","concat","headers","cities","data","map","name","country","countryCode","error","console","handleAutocompleteClick","cityName","handleSubmit","preventDefault","trim","alert","handleLocationClick","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","children","src","onSubmit","type","onClick","icon","onChange","placeholder","length","index"],"sources":["C:/Users/yigit/OneDrive/Masaüstü/Doc/Projeler/WeatherApp-ReactJS/src/modules/CityComponent.js"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\nimport React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLocationDot } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchBox = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  margin: 20px;\r\n\r\n  & input {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-evenly;\r\n    background: #1e1e29;\r\n    border-radius: 8px;\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    border: none;\r\n    outline: none;\r\n    font-weight: bold;\r\n    color: white;\r\n\r\n    ${({ isEmpty }) =>\r\n      isEmpty &&\r\n      css`\r\n        border: 2px solid red;\r\n      `}\r\n  }\r\n  & button {\r\n    background-color: #7692c9;\r\n    font-size: 14px;\r\n    padding: 0 10px;\r\n    color: white;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    margin-left: 3px;\r\n    margin-right: 3px;\r\n  }\r\n`;\r\nconst ChooseCityLabel = styled.span`\r\n  width: 311px;\r\n  height: 20px;\r\n\r\n  font-family: \"Nunito\";\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 140%;\r\n\r\n  align-items: center;\r\n  text-align: center;\r\n\r\n  color: #bfbfd4;\r\n`;\r\n\r\nconst WelcomeLabel = styled.div`\r\n  color: white;\r\n  font-family: \"Nunito\";\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 140%;\r\n  & span {\r\n    color: #7692c9;\r\n  }\r\n`;\r\n\r\nconst AppLogo = styled.img`\r\n  width: 186px;\r\n  height: 32px;\r\n  left: calc(50% - 186px / 2 - 0.5px);\r\n  top: 48px;\r\n  opacity: 0.8;\r\n  margin: 40px auto;\r\n  margin-bottom: 140px;\r\n`;\r\n\r\nconst AutocompleteList = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  position: absolute;\r\n  background-color: #1e1e29;\r\n  border-radius: 8px;\r\n  width: 208px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  top: calc(100% + -335px);\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst AutocompleteItem = styled.li`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: white;\r\n  &:hover {\r\n    background-color: #3d3d4d;\r\n  }\r\n`;\r\n\r\nconst CityComponent = ({ updateCity, fetchWeather }) => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\r\n\r\n  const handleInputChange = async (e) => {\r\n    const value = e.target.value;\r\n    setCity(value);\r\n\r\n    try {\r\n      const response = await Axios.get(\r\n        `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${value}`,\r\n        {\r\n          headers: {\r\n            \"X-RapidAPI-Key\":\r\n              \"64a947ac66msh6990946afef4b41p186a5djsn3522f68f3e2e\",\r\n            \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\r\n          },\r\n        }\r\n      );\r\n      const cities = response.data.data.map((city) => ({\r\n        name: city.city,\r\n        country: city.countryCode,\r\n      }));\r\n      setAutocompleteCities(cities);\r\n    } catch (error) {\r\n      console.error(\"API'den şehir verisi alınırken bir hata oluştu:\", error);\r\n    }\r\n  };\r\n  const handleAutocompleteClick = (cityName) => {\r\n    setCity(cityName);\r\n    setAutocompleteCities([]);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!city.trim()) {\r\n      alert(\"Please enter a location!\");\r\n      return;\r\n    }\r\n    fetchWeather(city);\r\n    setCity(\"\");\r\n  };\r\n\r\n  const handleLocationClick = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        // Koordinatları kullanarak hava durumu bilgisi al\r\n        const response = await Axios.get(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=8297725875f39e37ed6a7bc2e1fc738c`\r\n        );\r\n        fetchWeather(response.data.name);\r\n      },\r\n      (error) => {\r\n        console.error(\"Konum bilgisini alırken bir hata oluştu:\", error);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppLogo src={\"/icons/logo.png\"} />\r\n      <WelcomeLabel>\r\n        Welcome to <span>TypeWeather</span>\r\n      </WelcomeLabel>\r\n      <ChooseCityLabel>\r\n        Choose a location to see the weather forecast\r\n      </ChooseCityLabel>\r\n      <SearchBox onSubmit={handleSubmit}>\r\n        <button type=\"button\" onClick={handleLocationClick}>\r\n          <FontAwesomeIcon icon={faLocationDot} />\r\n        </button>\r\n        <input\r\n          value={city}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Search location\"\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n\r\n        {autocompleteCities.length > 0 && (\r\n          <AutocompleteList>\r\n            {autocompleteCities.map((city, index) => (\r\n              <AutocompleteItem\r\n                key={index}\r\n                onClick={() => handleAutocompleteClick(city.name)}\r\n              >\r\n                {`${city.name}, ${city.country}`}\r\n              </AutocompleteItem>\r\n            ))}\r\n          </AutocompleteList>\r\n        )}\r\n      </SearchBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}