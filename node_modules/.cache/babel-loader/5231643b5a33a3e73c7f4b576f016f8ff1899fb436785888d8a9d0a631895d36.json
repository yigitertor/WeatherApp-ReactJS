{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yigit\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\Doc\\\\Projeler\\\\WeatherApp-ReactJS\\\\src\\\\modules\\\\UserLocationFinder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserLocationFinder = () => {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          try {\n            const city = await getCityFromCoordinates(latitude, longitude);\n            setCity(city);\n            setLoading(false);\n          } catch (error) {\n            console.error(\"Error getting city:\", error);\n            setLoading(false);\n          }\n        }, error => {\n          console.error(\"Error getting location:\", error);\n          setLoading(false);\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        setLoading(false);\n      }\n    };\n    getUserLocation();\n  }, []);\n  const getCityFromCoordinates = async (latitude, longitude) => {\n    const apiKey = \"8297725875f39e37ed6a7bc2e1fc738c\";\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`);\n    const data = await response.json();\n    if (data.name) {\n      return data.name;\n    } else {\n      throw new Error(\"City not found\");\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: city ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Your current city is: \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Unable to determine your location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(UserLocationFinder, \"KbO5eBeuQYwL5LK/j4QbPC4RdEA=\");\n_c = UserLocationFinder;\nexport default UserLocationFinder;\nvar _c;\n$RefreshReg$(_c, \"UserLocationFinder\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserLocationFinder","_s","city","setCity","loading","setLoading","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","getCityFromCoordinates","error","console","apiKey","response","fetch","data","json","name","Error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yigit/OneDrive/Masaüstü/Doc/Projeler/WeatherApp-ReactJS/src/modules/UserLocationFinder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst UserLocationFinder = () => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getUserLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          async (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            try {\r\n              const city = await getCityFromCoordinates(latitude, longitude);\r\n              setCity(city);\r\n              setLoading(false);\r\n            } catch (error) {\r\n              console.error(\"Error getting city:\", error);\r\n              setLoading(false);\r\n            }\r\n          },\r\n          (error) => {\r\n            console.error(\"Error getting location:\", error);\r\n            setLoading(false);\r\n          }\r\n        );\r\n      } else {\r\n        console.error(\"Geolocation is not supported by this browser.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getUserLocation();\r\n  }, []);\r\n\r\n  const getCityFromCoordinates = async (latitude, longitude) => {\r\n    const apiKey = \"8297725875f39e37ed6a7bc2e1fc738c\";\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`\r\n    );\r\n    const data = await response.json();\r\n    if (data.name) {\r\n      return data.name;\r\n    } else {\r\n      throw new Error(\"City not found\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {city ? (\r\n        <div>Your current city is: {city}</div>\r\n      ) : (\r\n        <div>Unable to determine your location</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserLocationFinder;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;UAClB,MAAM;YAAEC,QAAQ;YAAEC;UAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;UAC/C,IAAI;YACF,MAAMX,IAAI,GAAG,MAAMY,sBAAsB,CAACH,QAAQ,EAAEC,SAAS,CAAC;YAC9DT,OAAO,CAACD,IAAI,CAAC;YACbG,UAAU,CAAC,KAAK,CAAC;UACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;YAC3CV,UAAU,CAAC,KAAK,CAAC;UACnB;QACF,CAAC,EACAU,KAAK,IAAK;UACTC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/CV,UAAU,CAAC,KAAK,CAAC;QACnB,CACF,CAAC;MACH,CAAC,MAAM;QACLW,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAC9DV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,sBAAsB,GAAG,MAAAA,CAAOH,QAAQ,EAAEC,SAAS,KAAK;IAC5D,MAAMK,MAAM,GAAG,kCAAkC;IACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,uDAAsDR,QAAS,QAAOC,SAAU,UAASK,MAAO,EACnG,CAAC;IACD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACE,IAAI,EAAE;MACb,OAAOF,IAAI,CAACE,IAAI;IAClB,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnC;EACF,CAAC;EAED,IAAInB,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAyB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACE7B,OAAA;IAAAyB,QAAA,EACGtB,IAAI,gBACHH,OAAA;MAAAyB,QAAA,GAAK,wBAAsB,EAACtB,IAAI;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAEvC7B,OAAA;MAAAyB,QAAA,EAAK;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAC5C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA3DID,kBAAkB;AAAA6B,EAAA,GAAlB7B,kBAAkB;AA6DxB,eAAeA,kBAAkB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}